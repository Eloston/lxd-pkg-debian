From ae72471cef24fd7cab4c98b2454d3e17ae4e80a7 Mon Sep 17 00:00:00 2001
From: Christian Brauner <christian.brauner@ubuntu.com>
Date: Thu, 16 Feb 2017 23:11:55 +0100
Subject: test: add lxd init --auto tests

Signed-off-by: Christian Brauner <christian.brauner@ubuntu.com>
---
 test/main.sh           | 108 +++++++++++++++++++++++++++++++++++++++++++++++++
 test/suites/init.sh    |  81 +++++++++++++++++++++++++++++++++++++
 test/suites/storage.sh | 107 ------------------------------------------------
 3 files changed, 189 insertions(+), 107 deletions(-)
 create mode 100644 test/suites/init.sh

diff --git a/test/main.sh b/test/main.sh
index d2e176e..be3c592 100755
--- a/test/main.sh
+++ b/test/main.sh
@@ -397,6 +397,113 @@ wipe() {
   rm -Rf "${1}"
 }
 
+configure_lvm_loop_device() {
+  lv_loop_file=$(mktemp -p "${TEST_DIR}" XXXX.lvm)
+  truncate -s 4G "${lv_loop_file}"
+  pvloopdev=$(losetup --show -f "${lv_loop_file}")
+  if [ ! -e "${pvloopdev}" ]; then
+    echo "failed to setup loop"
+    false
+  fi
+
+  pvcreate "${pvloopdev}"
+
+  # The following code enables to return a value from a shell function by
+  # calling the function as: fun VAR1
+
+  # shellcheck disable=2039
+  local  __tmp1="${1}"
+  # shellcheck disable=2039
+  local  res1="${lv_loop_file}"
+  if [ "${__tmp1}" ]; then
+      eval "${__tmp1}='${res1}'"
+  fi
+
+  # shellcheck disable=2039
+  local  __tmp2="${2}"
+  # shellcheck disable=2039
+  local  res2="${pvloopdev}"
+  if [ "${__tmp2}" ]; then
+      eval "${__tmp2}='${res2}'"
+  fi
+}
+
+deconfigure_lvm_loop_device() {
+  lv_loop_file="${1}"
+  loopdev="${2}"
+
+  SUCCESS=0
+  # shellcheck disable=SC2034
+  for i in $(seq 10); do
+    pvremove -f "${loopdev}" > /dev/null 2>&1 || true
+    if losetup -d "${loopdev}"; then
+      SUCCESS=1
+      break
+    fi
+
+    sleep 0.5
+  done
+
+  if [ "${SUCCESS}" = "0" ]; then
+    echo "Failed to tear down loop device."
+    false
+  fi
+
+  rm -f "${lv_loop_file}"
+}
+
+configure_loop_device() {
+  lv_loop_file=$(mktemp -p "${TEST_DIR}" XXXX.img)
+  truncate -s 10G "${lv_loop_file}"
+  pvloopdev=$(losetup --show -f "${lv_loop_file}")
+  if [ ! -e "${pvloopdev}" ]; then
+    echo "failed to setup loop"
+    false
+  fi
+
+  # The following code enables to return a value from a shell function by
+  # calling the function as: fun VAR1
+
+  # shellcheck disable=2039
+  local  __tmp1="${1}"
+  # shellcheck disable=2039
+  local  res1="${lv_loop_file}"
+  if [ "${__tmp1}" ]; then
+      eval "${__tmp1}='${res1}'"
+  fi
+
+  # shellcheck disable=2039
+  local  __tmp2="${2}"
+  # shellcheck disable=2039
+  local  res2="${pvloopdev}"
+  if [ "${__tmp2}" ]; then
+      eval "${__tmp2}='${res2}'"
+  fi
+}
+
+deconfigure_loop_device() {
+  lv_loop_file="${1}"
+  loopdev="${2}"
+
+  SUCCESS=0
+  # shellcheck disable=SC2034
+  for i in $(seq 10); do
+    if losetup -d "${loopdev}"; then
+      SUCCESS=1
+      break
+    fi
+
+    sleep 0.5
+  done
+
+  if [ "${SUCCESS}" = "0" ]; then
+    echo "Failed to tear down loop device"
+    false
+  fi
+
+  rm -f "${lv_loop_file}"
+}
+
 # Must be set before cleanup()
 TEST_CURRENT=setup
 TEST_RESULT=failure
@@ -479,5 +586,6 @@ run_test test_fdleak "fd leak"
 run_test test_cpu_profiling "CPU profiling"
 run_test test_mem_profiling "memory profiling"
 run_test test_storage "storage"
+run_test test_lxd_autoinit "lxd init auto"
 
 TEST_RESULT=success
diff --git a/test/suites/init.sh b/test/suites/init.sh
new file mode 100644
index 0000000..8a41846
--- /dev/null
+++ b/test/suites/init.sh
@@ -0,0 +1,81 @@
+#!/bin/sh
+
+test_lxd_autoinit() {
+  # lxd init --auto
+  LXD_INIT_DIR=$(mktemp -d -p "${TEST_DIR}" XXX)
+  chmod +x "${LXD_INIT_DIR}"
+  spawn_lxd "${LXD_INIT_DIR}" false
+
+  ZFS_POOL="lxdtest-$(basename "${LXD_DIR}")-init"
+  LXD_DIR=${LXD_INIT_DIR} lxd init --auto
+
+  kill_lxd "${LXD_INIT_DIR}"
+
+  # lxd init --auto --storage-backend zfs
+  if [ "${LXD_BACKEND}" = "zfs" ]; then
+    LXD_INIT_DIR=$(mktemp -d -p "${TEST_DIR}" XXX)
+    chmod +x "${LXD_INIT_DIR}"
+    spawn_lxd "${LXD_INIT_DIR}" false
+
+    LXD_DIR=${LXD_INIT_DIR} lxd init --auto --storage-backend zfs
+
+    kill_lxd "${LXD_INIT_DIR}"
+  fi
+
+  # lxd init --auto --storage-backend zfs --storage-pool <name>
+  if [ "${LXD_BACKEND}" = "zfs" ]; then
+    LXD_INIT_DIR=$(mktemp -d -p "${TEST_DIR}" XXX)
+    chmod +x "${LXD_INIT_DIR}"
+    spawn_lxd "${LXD_INIT_DIR}" false
+
+    configure_loop_device loop_file_1 loop_device_1
+    zpool create "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool" "${loop_device_1}" -m none -O compression=on
+    LXD_DIR=${LXD_INIT_DIR} lxd init --auto --storage-backend zfs --storage-pool "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool"
+
+    kill_lxd "${LXD_INIT_DIR}"
+    deconfigure_loop_device "${loop_file_1}" "${loop_device_1}"
+  fi
+
+  # lxd init --auto --storage-backend zfs --storage-pool <name>/<non-existing-dataset>
+  if [ "${LXD_BACKEND}" = "zfs" ]; then
+    LXD_INIT_DIR=$(mktemp -d -p "${TEST_DIR}" XXX)
+    chmod +x "${LXD_INIT_DIR}"
+    spawn_lxd "${LXD_INIT_DIR}" false
+
+    configure_loop_device loop_file_1 loop_device_1
+    zpool create "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool" "${loop_device_1}" -m none -O compression=on
+    LXD_DIR=${LXD_INIT_DIR} lxd init --auto --storage-backend zfs --storage-pool "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool/non-existing-dataset"
+
+    kill_lxd "${LXD_INIT_DIR}"
+    deconfigure_loop_device "${loop_file_1}" "${loop_device_1}"
+    zpool destroy -f "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool"
+  fi
+
+  # lxd init --auto --storage-backend zfs --storage-pool <name>/<existing-dataset>
+  if [ "${LXD_BACKEND}" = "zfs" ]; then
+    LXD_INIT_DIR=$(mktemp -d -p "${TEST_DIR}" XXX)
+    chmod +x "${LXD_INIT_DIR}"
+    spawn_lxd "${LXD_INIT_DIR}" false
+
+    configure_loop_device loop_file_1 loop_device_1
+    zpool create "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool" "${loop_device_1}" -f -m none -O compression=on
+    zfs create -p -o mountpoint=none "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool/existing-dataset"
+    LXD_DIR=${LXD_INIT_DIR} lxd init --auto --storage-backend zfs --storage-pool "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool/existing-dataset"
+
+    kill_lxd "${LXD_INIT_DIR}"
+    deconfigure_loop_device "${loop_file_1}" "${loop_device_1}"
+    zpool destroy -f "lxdtest-$(basename "${LXD_DIR}")-pool1-existing-pool"
+  fi
+
+ # lxd init --storage-backend zfs --storage-create-loop 1 --storage-pool <name> --auto
+  if [ "${LXD_BACKEND}" = "zfs" ]; then
+    LXD_INIT_DIR=$(mktemp -d -p "${TEST_DIR}" XXX)
+    chmod +x "${LXD_INIT_DIR}"
+    spawn_lxd "${LXD_INIT_DIR}" false
+
+    ZFS_POOL="lxdtest-$(basename "${LXD_DIR}")-init"
+    LXD_DIR=${LXD_INIT_DIR} lxd init --storage-backend zfs --storage-create-loop 1 --storage-pool "${ZFS_POOL}" --auto
+
+    kill_lxd "${LXD_INIT_DIR}"
+  fi
+}
diff --git a/test/suites/storage.sh b/test/suites/storage.sh
index e678a24..ad8eead 100644
--- a/test/suites/storage.sh
+++ b/test/suites/storage.sh
@@ -1,112 +1,5 @@
 #!/bin/sh
 
-configure_lvm_loop_device() {
-  lv_loop_file=$(mktemp -p "${TEST_DIR}" XXXX.lvm)
-  truncate -s 4G "${lv_loop_file}"
-  pvloopdev=$(losetup --show -f "${lv_loop_file}")
-  if [ ! -e "${pvloopdev}" ]; then
-    echo "failed to setup loop"
-    false
-  fi
-
-  pvcreate "${pvloopdev}"
-
-  # The following code enables to return a value from a shell function by
-  # calling the function as: fun VAR1
-
-  # shellcheck disable=2039
-  local  __tmp1="${1}"
-  # shellcheck disable=2039
-  local  res1="${lv_loop_file}"
-  if [ "${__tmp1}" ]; then
-      eval "${__tmp1}='${res1}'"
-  fi
-
-  # shellcheck disable=2039
-  local  __tmp2="${2}"
-  # shellcheck disable=2039
-  local  res2="${pvloopdev}"
-  if [ "${__tmp2}" ]; then
-      eval "${__tmp2}='${res2}'"
-  fi
-}
-
-deconfigure_lvm_loop_device() {
-  lv_loop_file="${1}"
-  loopdev="${2}"
-
-  SUCCESS=0
-  # shellcheck disable=SC2034
-  for i in $(seq 10); do
-    pvremove -f "${loopdev}" > /dev/null 2>&1 || true
-    if losetup -d "${loopdev}"; then
-      SUCCESS=1
-      break
-    fi
-
-    sleep 0.5
-  done
-
-  if [ "${SUCCESS}" = "0" ]; then
-    echo "Failed to tear down loop device."
-    false
-  fi
-
-  rm -f "${lv_loop_file}"
-}
-
-configure_loop_device() {
-  lv_loop_file=$(mktemp -p "${TEST_DIR}" XXXX.img)
-  truncate -s 10G "${lv_loop_file}"
-  pvloopdev=$(losetup --show -f "${lv_loop_file}")
-  if [ ! -e "${pvloopdev}" ]; then
-    echo "failed to setup loop"
-    false
-  fi
-
-  # The following code enables to return a value from a shell function by
-  # calling the function as: fun VAR1
-
-  # shellcheck disable=2039
-  local  __tmp1="${1}"
-  # shellcheck disable=2039
-  local  res1="${lv_loop_file}"
-  if [ "${__tmp1}" ]; then
-      eval "${__tmp1}='${res1}'"
-  fi
-
-  # shellcheck disable=2039
-  local  __tmp2="${2}"
-  # shellcheck disable=2039
-  local  res2="${pvloopdev}"
-  if [ "${__tmp2}" ]; then
-      eval "${__tmp2}='${res2}'"
-  fi
-}
-
-deconfigure_loop_device() {
-  lv_loop_file="${1}"
-  loopdev="${2}"
-
-  SUCCESS=0
-  # shellcheck disable=SC2034
-  for i in $(seq 10); do
-    if losetup -d "${loopdev}"; then
-      SUCCESS=1
-      break
-    fi
-
-    sleep 0.5
-  done
-
-  if [ "${SUCCESS}" = "0" ]; then
-    echo "Failed to tear down loop device"
-    false
-  fi
-
-  rm -f "${lv_loop_file}"
-}
-
 test_storage() {
   LXD_STORAGE_DIR=$(mktemp -d -p "${TEST_DIR}" XXXXXXXXX)
   chmod +x "${LXD_STORAGE_DIR}"
