From 8cd9279c6d693ccfd582f9863cc15b121b65a6a1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?St=C3=A9phane=20Graber?= <stgraber@ubuntu.com>
Date: Fri, 6 Oct 2017 00:20:23 -0400
Subject: lxc/storage: Fix remote operations
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: St√©phane Graber <stgraber@ubuntu.com>
---
 lxc/storage.go | 56 +++++++++++++++++++++++++++++++++++---------------------
 1 file changed, 35 insertions(+), 21 deletions(-)

diff --git a/lxc/storage.go b/lxc/storage.go
index b09bbe0d..51349c18 100644
--- a/lxc/storage.go
+++ b/lxc/storage.go
@@ -157,105 +157,119 @@ func (c *storageCmd) run(conf *config.Config, args []string) error {
 		return errArgs
 	}
 
-	remote, sub, err := conf.ParseRemote(args[1])
-	if err != nil {
-		return err
-	}
+	if args[0] == "volume" {
+		if len(args) < 3 {
+			return errArgs
+		}
 
-	client, err := conf.GetContainerServer(remote)
-	if err != nil {
-		return err
-	}
+		remote, sub, err := conf.ParseRemote(args[2])
+		if err != nil {
+			return err
+		}
+
+		client, err := conf.GetContainerServer(remote)
+		if err != nil {
+			return err
+		}
 
-	if args[0] == "volume" {
 		switch args[1] {
 		case "attach":
 			if len(args) < 5 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeAttach(client, pool, volume, args[4:])
 		case "attach-profile":
 			if len(args) < 5 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeAttachProfile(client, pool, volume, args[4:])
 		case "create":
 			if len(args) < 4 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeCreate(client, pool, volume, args[4:])
 		case "delete":
 			if len(args) != 4 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeDelete(client, pool, volume)
 		case "detach":
 			if len(args) < 4 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeDetach(client, pool, volume, args[4:])
 		case "detach-profile":
 			if len(args) < 5 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeDetachProfile(client, pool, volume, args[4:])
 		case "edit":
 			if len(args) != 4 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeEdit(client, pool, volume)
 		case "get":
 			if len(args) < 4 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeGet(client, pool, volume, args[3:])
 		case "list":
 			if len(args) != 3 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			return c.doStoragePoolVolumesList(conf, remote, pool, args)
 		case "set":
 			if len(args) < 4 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeSet(client, pool, volume, args[3:])
 		case "unset":
 			if len(args) < 4 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeSet(client, pool, volume, args[3:])
 		case "show":
 			if len(args) != 4 {
 				return errArgs
 			}
-			pool := args[2]
+			pool := sub
 			volume := args[3]
 			return c.doStoragePoolVolumeShow(client, pool, volume)
 		default:
 			return errArgs
 		}
 	} else {
+		remote, sub, err := conf.ParseRemote(args[1])
+		if err != nil {
+			return err
+		}
+
+		client, err := conf.GetContainerServer(remote)
+		if err != nil {
+			return err
+		}
+
 		pool := sub
 		switch args[0] {
 		case "create":
