From 0e839b4e35a1e08c34b614fd17356e27f6f34501 Mon Sep 17 00:00:00 2001
From: Alberto Donato <alberto.donato@canonical.com>
Date: Thu, 21 Sep 2017 09:45:25 +0200
Subject: shared/osarch: add function for parsing /etc/os-release

Signed-off-by: Alberto Donato <alberto.donato@canonical.com>
---
 shared/osarch/release.go      | 42 ++++++++++++++++++++
 shared/osarch/release_test.go | 90 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 132 insertions(+)
 create mode 100644 shared/osarch/release.go
 create mode 100644 shared/osarch/release_test.go

diff --git a/shared/osarch/release.go b/shared/osarch/release.go
new file mode 100644
index 00000000..22ba8d09
--- /dev/null
+++ b/shared/osarch/release.go
@@ -0,0 +1,42 @@
+package osarch
+
+import (
+	"fmt"
+	"io/ioutil"
+	"os"
+	"strings"
+)
+
+// GetLSBRelease returns a map with Linux distribution information
+func GetLSBRelease() (map[string]string, error) {
+	osRelease, err := getLSBRelease("/etc/os-release")
+	if os.IsNotExist(err) {
+		return getLSBRelease("/usr/lib/os-release")
+	}
+	return osRelease, err
+}
+
+func getLSBRelease(filename string) (map[string]string, error) {
+	osRelease := make(map[string]string)
+
+	data, err := ioutil.ReadFile(filename)
+	if err != nil {
+		return osRelease, err
+	}
+	for i, line := range strings.Split(string(data), "\n") {
+		if len(line) == 0 {
+			continue
+		}
+		if strings.HasPrefix(line, "#") {
+			continue
+		}
+
+		tokens := strings.SplitN(line, "=", 2)
+		if len(tokens) != 2 {
+			return osRelease, fmt.Errorf("%s: invalid format on line %d", filename, i+1)
+		}
+		osRelease[tokens[0]] = strings.Trim(tokens[1], `'"`)
+	}
+
+	return osRelease, nil
+}
diff --git a/shared/osarch/release_test.go b/shared/osarch/release_test.go
new file mode 100644
index 00000000..55b83084
--- /dev/null
+++ b/shared/osarch/release_test.go
@@ -0,0 +1,90 @@
+package osarch
+
+import (
+	"fmt"
+	"testing"
+
+	"github.com/stretchr/testify/suite"
+
+	"github.com/lxc/lxd/shared/testhelpers"
+)
+
+type releaseTestSuite struct {
+	suite.Suite
+}
+
+func TestReleaseTestSuite(t *testing.T) {
+	suite.Run(t, new(releaseTestSuite))
+}
+
+func (s *releaseTestSuite) TestGetLSBRelease() {
+	content := `NAME="Ubuntu"
+ID="ubuntu"
+VERSION_ID="16.04"
+`
+	filename, cleanup := testhelpers.WriteTempFile(s.Suite, "", "os-release", content)
+	defer cleanup()
+
+	lsbRelease, err := getLSBRelease(filename)
+	s.Nil(err)
+	s.Equal(
+		map[string]string{
+			"NAME":       "Ubuntu",
+			"ID":         "ubuntu",
+			"VERSION_ID": "16.04",
+		}, lsbRelease)
+}
+
+func (s *releaseTestSuite) TestGetLSBReleaseSingleQuotes() {
+	content := `NAME='Ubuntu'`
+	filename, cleanup := testhelpers.WriteTempFile(s.Suite, "", "os-release", content)
+	defer cleanup()
+
+	lsbRelease, err := getLSBRelease(filename)
+	s.Nil(err)
+	s.Equal(map[string]string{"NAME": "Ubuntu"}, lsbRelease)
+}
+
+func (s *releaseTestSuite) TestGetLSBReleaseNoQuotes() {
+	content := `NAME=Ubuntu`
+	filename, cleanup := testhelpers.WriteTempFile(s.Suite, "", "os-release", content)
+	defer cleanup()
+
+	lsbRelease, err := getLSBRelease(filename)
+	s.Nil(err)
+	s.Equal(map[string]string{"NAME": "Ubuntu"}, lsbRelease)
+}
+
+func (s *releaseTestSuite) TestGetLSBReleaseSkipCommentsEmpty() {
+	content := `
+NAME="Ubuntu"
+
+ID="ubuntu"
+# skip this line
+VERSION_ID="16.04"
+`
+	filename, cleanup := testhelpers.WriteTempFile(s.Suite, "", "os-release", content)
+	defer cleanup()
+
+	lsbRelease, err := getLSBRelease(filename)
+	s.Nil(err)
+	s.Equal(
+		map[string]string{
+			"NAME":       "Ubuntu",
+			"ID":         "ubuntu",
+			"VERSION_ID": "16.04",
+		}, lsbRelease)
+}
+
+func (s *releaseTestSuite) TestGetLSBReleaseInvalidLine() {
+	content := `
+NAME="Ubuntu"
+this is invalid
+ID="ubuntu"
+`
+	filename, cleanup := testhelpers.WriteTempFile(s.Suite, "", "os-release", content)
+	defer cleanup()
+
+	_, err := getLSBRelease(filename)
+	s.EqualError(err, fmt.Sprintf("%s: invalid format on line 3", filename))
+}
