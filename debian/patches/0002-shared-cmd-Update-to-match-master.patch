From bc88b39467996042409623be66bc07ea9a260c66 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?St=C3=A9phane=20Graber?= <stgraber@ubuntu.com>
Date: Wed, 24 May 2017 14:48:05 -0400
Subject: shared/cmd: Update to match master
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: St√©phane Graber <stgraber@ubuntu.com>
---
 shared/cmd/context.go      | 17 +++++++++++++++++
 shared/cmd/context_test.go | 22 ++++++++++++++++++++++
 shared/cmd/testing.go      | 35 +++++++++++++++++++++++++++++++++++
 3 files changed, 74 insertions(+)

diff --git a/shared/cmd/context.go b/shared/cmd/context.go
index 346657ca..ef192ce3 100644
--- a/shared/cmd/context.go
+++ b/shared/cmd/context.go
@@ -3,7 +3,9 @@ package cmd
 import (
 	"bufio"
 	"fmt"
+	"gopkg.in/yaml.v2"
 	"io"
+	"io/ioutil"
 	"strconv"
 	"strings"
 
@@ -27,6 +29,11 @@ func NewContext(stdin io.Reader, stdout, stderr io.Writer) *Context {
 	}
 }
 
+// Output prints a message on standard output.
+func (c *Context) Output(format string, a ...interface{}) {
+	fmt.Fprintf(c.stdout, format, a...)
+}
+
 // AskBool asks a question an expect a yes/no answer.
 func (c *Context) AskBool(question string, defaultAnswer string) bool {
 	for {
@@ -117,6 +124,16 @@ func (c *Context) AskPassword(question string, reader func(int) ([]byte, error))
 	}
 }
 
+// InputYAML treats stdin as YAML content and returns the unmarshalled
+// structure
+func (c *Context) InputYAML(out interface{}) error {
+	bytes, err := ioutil.ReadAll(c.stdin)
+	if err != nil {
+		return err
+	}
+	return yaml.Unmarshal(bytes, out)
+}
+
 // Ask a question on the output stream and read the answer from the input stream
 func (c *Context) askQuestion(question, defaultAnswer string) string {
 	fmt.Fprintf(c.stdout, question)
diff --git a/shared/cmd/context_test.go b/shared/cmd/context_test.go
index 24006b08..443541e4 100644
--- a/shared/cmd/context_test.go
+++ b/shared/cmd/context_test.go
@@ -8,6 +8,14 @@ import (
 	"github.com/stretchr/testify/assert"
 )
 
+// Output prints the given message on standard output
+func TestOutput(t *testing.T) {
+	streams := cmd.NewMemoryStreams("")
+	context := cmd.NewMemoryContext(streams)
+	context.Output("Hello %s", "world")
+	streams.AssertOutEqual(t, "Hello world")
+}
+
 // AskBool returns a boolean result depending on the user input.
 func TestAskBool(t *testing.T) {
 	cases := []struct {
@@ -146,3 +154,17 @@ func TestAskPassword(t *testing.T) {
 		streams.AssertErrEqual(t, c.error)
 	}
 }
+
+// InputYAML parses the YAML content passed via stdin.
+func TestInputYAML(t *testing.T) {
+	streams := cmd.NewMemoryStreams("field: foo")
+	context := cmd.NewMemoryContext(streams)
+
+	type Schema struct {
+		Field string
+	}
+	schema := Schema{}
+
+	assert.Nil(t, context.InputYAML(&schema))
+	assert.Equal(t, "foo", schema.Field, "Unexpected field value")
+}
diff --git a/shared/cmd/testing.go b/shared/cmd/testing.go
index faefb48d..a51813e4 100644
--- a/shared/cmd/testing.go
+++ b/shared/cmd/testing.go
@@ -4,6 +4,7 @@ package cmd
 
 import (
 	"bytes"
+	"io/ioutil"
 	"strings"
 	"testing"
 
@@ -28,6 +29,40 @@ func NewMemoryStreams(input string) *MemoryStreams {
 	}
 }
 
+// InputRead returns the current input string.
+func (s *MemoryStreams) InputRead() string {
+	bytes, _ := ioutil.ReadAll(s.in)
+	return string(bytes)
+}
+
+// InputReset replaces the data in the input stream.
+func (s *MemoryStreams) InputReset(input string) {
+	// XXX This is what the stdlib strings.Reader.Reset() does, however
+	//     this method is not available in Go 1.6.
+	*s.in = *strings.NewReader(input)
+}
+
+// InputAppend adds the given text to the current input.
+func (s *MemoryStreams) InputAppend(text string) {
+	s.InputReset(s.InputRead() + text)
+}
+
+// InputAppendLine adds a single line to the input stream.
+func (s *MemoryStreams) InputAppendLine(line string) {
+	s.InputAppend(line + "\n")
+}
+
+// InputAppendBoolAnswer adds a new "yes" or "no" line depending on the answer.
+func (s *MemoryStreams) InputAppendBoolAnswer(answer bool) {
+	var line string
+	if answer {
+		line = "yes"
+	} else {
+		line = "no"
+	}
+	s.InputAppendLine(line)
+}
+
 // AssertOutEqual checks that the given text matches the the out stream.
 func (s *MemoryStreams) AssertOutEqual(t *testing.T, expected string) {
 	assert.Equal(t, expected, s.out.String(), "Unexpected output stream")
