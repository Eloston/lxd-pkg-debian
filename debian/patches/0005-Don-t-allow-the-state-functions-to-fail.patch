From 538b526741521bcd05cd7805d1834f8fd987820d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?St=C3=A9phane=20Graber?= <stgraber@ubuntu.com>
Date: Thu, 25 Feb 2016 11:33:31 -0500
Subject: Don't allow the state functions to fail
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

If we get garbage back from the cgroup subsystem we should just render
the values as empty or -1 rather than fail the entire REST call for it.

Signed-off-by: St√©phane Graber <stgraber@ubuntu.com>
---
 lxd/container_lxc.go | 43 ++++++++++++++++++-------------------------
 1 file changed, 18 insertions(+), 25 deletions(-)

diff --git a/lxd/container_lxc.go b/lxd/container_lxc.go
index ec2c87f..f951372 100644
--- a/lxd/container_lxc.go
+++ b/lxd/container_lxc.go
@@ -1414,20 +1414,10 @@ func (c *containerLXC) RenderState() (*shared.ContainerState, error) {
 	}
 
 	if c.IsRunning() {
-		memory, err := c.memoryState()
-		if err != nil {
-			return nil, err
-		}
-
-		network, err := c.networkState()
-		if err != nil {
-			return nil, err
-		}
-
 		pid := c.InitPID()
 		status.Disk = c.diskState()
-		status.Memory = *memory
-		status.Network = network
+		status.Memory = c.memoryState()
+		status.Network = c.networkState()
 		status.Pid = int64(pid)
 		status.Processes = c.processesState()
 	}
@@ -2701,18 +2691,18 @@ func (c *containerLXC) diskState() map[string]shared.ContainerStateDisk {
 	return disk
 }
 
-func (c *containerLXC) memoryState() (*shared.ContainerStateMemory, error) {
+func (c *containerLXC) memoryState() shared.ContainerStateMemory {
 	memory := shared.ContainerStateMemory{}
 
 	if !cgMemoryController {
-		return &memory, nil
+		return memory
 	}
 
 	// Memory in bytes
 	value, err := c.CGroupGet("memory.usage_in_bytes")
 	valueInt, err := strconv.ParseInt(value, 10, 64)
 	if err != nil {
-		return nil, err
+		valueInt = -1
 	}
 	memory.Usage = valueInt
 
@@ -2720,7 +2710,7 @@ func (c *containerLXC) memoryState() (*shared.ContainerStateMemory, error) {
 	value, err = c.CGroupGet("memory.max_usage_in_bytes")
 	valueInt, err = strconv.ParseInt(value, 10, 64)
 	if err != nil {
-		return nil, err
+		valueInt = -1
 	}
 
 	memory.UsagePeak = valueInt
@@ -2730,7 +2720,7 @@ func (c *containerLXC) memoryState() (*shared.ContainerStateMemory, error) {
 		value, err := c.CGroupGet("memory.memsw.usage_in_bytes")
 		valueInt, err := strconv.ParseInt(value, 10, 64)
 		if err != nil {
-			return nil, err
+			valueInt = -1
 		}
 
 		memory.SwapUsage = valueInt - memory.Usage
@@ -2739,19 +2729,21 @@ func (c *containerLXC) memoryState() (*shared.ContainerStateMemory, error) {
 		value, err = c.CGroupGet("memory.memsw.max_usage_in_bytes")
 		valueInt, err = strconv.ParseInt(value, 10, 64)
 		if err != nil {
-			return nil, err
+			valueInt = -1
 		}
 
 		memory.SwapUsagePeak = valueInt - memory.UsagePeak
 	}
 
-	return &memory, nil
+	return memory
 }
 
-func (c *containerLXC) networkState() (map[string]shared.ContainerStateNetwork, error) {
+func (c *containerLXC) networkState() map[string]shared.ContainerStateNetwork {
+	result := map[string]shared.ContainerStateNetwork{}
+
 	pid := c.InitPID()
 	if pid < 1 {
-		return nil, fmt.Errorf("Container isn't running")
+		return result
 	}
 
 	// Get the network state from the container
@@ -2762,24 +2754,25 @@ func (c *containerLXC) networkState() (map[string]shared.ContainerStateNetwork,
 
 	// Process forkgetnet response
 	if err != nil {
-		return nil, fmt.Errorf("Error calling 'lxd forkgetnet %d': %s", pid, string(out))
+		shared.Log.Error("Error calling 'lxd forkgetnet", log.Ctx{"container": c.name, "output": string(out), "pid": pid})
+		return result
 	}
 
 	networks := map[string]shared.ContainerStateNetwork{}
 
 	err = json.Unmarshal(out, &networks)
 	if err != nil {
-		return nil, err
+		shared.Log.Error("Failure to read forkgetnet json", log.Ctx{"container": c.name, "err": err})
+		return result
 	}
 
 	// Add HostName field
-	result := map[string]shared.ContainerStateNetwork{}
 	for netName, net := range networks {
 		net.HostName = c.getHostInterface(netName)
 		result[netName] = net
 	}
 
-	return result, nil
+	return result
 }
 
 func (c *containerLXC) processesState() int64 {
