From 0eac79d4bc09be49ea063679b5586db222acf5a1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?St=C3=A9phane=20Graber?= <stgraber@ubuntu.com>
Date: Fri, 19 Feb 2016 15:18:35 -0500
Subject: Re-implement terminal functions through cgo
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This fixes exec and other functions on ppc64el.

Closes #1621

Signed-off-by: St√©phane Graber <stgraber@ubuntu.com>
---
 lxc/config.go                     |  8 ++--
 lxc/exec.go                       | 14 +++----
 lxc/file.go                       |  5 +--
 lxc/image.go                      |  4 +-
 lxc/profile.go                    |  6 +--
 lxc/remote.go                     |  1 +
 shared/termios/termios.go         | 79 +++++++++++++++++++++++++++++++++++++++
 shared/termios/termios_windows.go | 43 +++++++++++++++++++++
 8 files changed, 141 insertions(+), 19 deletions(-)
 create mode 100644 shared/termios/termios.go
 create mode 100644 shared/termios/termios_windows.go

diff --git a/lxc/config.go b/lxc/config.go
index 52e146b..54134fc 100644
--- a/lxc/config.go
+++ b/lxc/config.go
@@ -10,13 +10,13 @@ import (
 	"syscall"
 
 	"github.com/olekukonko/tablewriter"
-	"golang.org/x/crypto/ssh/terminal"
 	"gopkg.in/yaml.v2"
 
 	"github.com/lxc/lxd"
 	"github.com/lxc/lxd/shared"
 	"github.com/lxc/lxd/shared/gnuflag"
 	"github.com/lxc/lxd/shared/i18n"
+	"github.com/lxc/lxd/shared/termios"
 )
 
 type configCmd struct {
@@ -106,7 +106,7 @@ func (c *configCmd) doSet(config *lxd.Config, args []string, unset bool) error {
 	key := args[2]
 	value := args[3]
 
-	if !terminal.IsTerminal(int(syscall.Stdin)) && value == "-" {
+	if !termios.IsTerminal(int(syscall.Stdin)) && value == "-" {
 		buf, err := ioutil.ReadAll(os.Stdin)
 		if err != nil {
 			return fmt.Errorf(i18n.G("Can't read from stdin: %s"), err)
@@ -446,7 +446,7 @@ func (c *configCmd) run(config *lxd.Config, args []string) error {
 
 func (c *configCmd) doContainerConfigEdit(client *lxd.Client, cont string) error {
 	// If stdin isn't a terminal, read text from it
-	if !terminal.IsTerminal(int(syscall.Stdin)) {
+	if !termios.IsTerminal(int(syscall.Stdin)) {
 		contents, err := ioutil.ReadAll(os.Stdin)
 		if err != nil {
 			return err
@@ -509,7 +509,7 @@ func (c *configCmd) doContainerConfigEdit(client *lxd.Client, cont string) error
 
 func (c *configCmd) doDaemonConfigEdit(client *lxd.Client) error {
 	// If stdin isn't a terminal, read text from it
-	if !terminal.IsTerminal(int(syscall.Stdin)) {
+	if !termios.IsTerminal(int(syscall.Stdin)) {
 		contents, err := ioutil.ReadAll(os.Stdin)
 		if err != nil {
 			return err
diff --git a/lxc/exec.go b/lxc/exec.go
index 74390e9..a5c3033 100644
--- a/lxc/exec.go
+++ b/lxc/exec.go
@@ -9,12 +9,12 @@ import (
 	"syscall"
 
 	"github.com/gorilla/websocket"
-	"golang.org/x/crypto/ssh/terminal"
 
 	"github.com/lxc/lxd"
 	"github.com/lxc/lxd/shared"
 	"github.com/lxc/lxd/shared/gnuflag"
 	"github.com/lxc/lxd/shared/i18n"
+	"github.com/lxc/lxd/shared/termios"
 )
 
 type envFlag []string
@@ -54,7 +54,7 @@ func (c *execCmd) flags() {
 }
 
 func (c *execCmd) sendTermSize(control *websocket.Conn) error {
-	width, height, err := terminal.GetSize(int(syscall.Stdout))
+	width, height, err := termios.GetSize(int(syscall.Stdout))
 	if err != nil {
 		return err
 	}
@@ -118,16 +118,16 @@ func (c *execCmd) run(config *lxd.Config, args []string) error {
 	} else if c.modeFlag == "non-interactive" {
 		interactive = false
 	} else {
-		interactive = terminal.IsTerminal(cfd)
+		interactive = termios.IsTerminal(cfd)
 	}
 
-	var oldttystate *terminal.State
+	var oldttystate *termios.State
 	if interactive {
-		oldttystate, err = terminal.MakeRaw(cfd)
+		oldttystate, err = termios.MakeRaw(cfd)
 		if err != nil {
 			return err
 		}
-		defer terminal.Restore(cfd, oldttystate)
+		defer termios.Restore(cfd, oldttystate)
 	}
 
 	handler := c.controlSocketHandler
@@ -149,7 +149,7 @@ func (c *execCmd) run(config *lxd.Config, args []string) error {
 		 * Additionally, since os.Exit() exits without running deferred
 		 * functions, we restore the terminal explicitly.
 		 */
-		terminal.Restore(cfd, oldttystate)
+		termios.Restore(cfd, oldttystate)
 	}
 
 	/* we get the result of waitpid() here so we need to transform it */
diff --git a/lxc/file.go b/lxc/file.go
index 0476dda..f16844d 100644
--- a/lxc/file.go
+++ b/lxc/file.go
@@ -11,12 +11,11 @@ import (
 	"strings"
 	"syscall"
 
-	"golang.org/x/crypto/ssh/terminal"
-
 	"github.com/lxc/lxd"
 	"github.com/lxc/lxd/shared"
 	"github.com/lxc/lxd/shared/gnuflag"
 	"github.com/lxc/lxd/shared/i18n"
+	"github.com/lxc/lxd/shared/termios"
 )
 
 type fileCmd struct {
@@ -231,7 +230,7 @@ func (c *fileCmd) edit(config *lxd.Config, args []string) error {
 	}
 
 	// If stdin isn't a terminal, read text from it
-	if !terminal.IsTerminal(int(syscall.Stdin)) {
+	if !termios.IsTerminal(int(syscall.Stdin)) {
 		return c.push(config, append([]string{os.Stdin.Name()}, args[0]))
 	}
 
diff --git a/lxc/image.go b/lxc/image.go
index 0bb99e8..05c78d5 100644
--- a/lxc/image.go
+++ b/lxc/image.go
@@ -10,13 +10,13 @@ import (
 	"syscall"
 
 	"github.com/olekukonko/tablewriter"
-	"golang.org/x/crypto/ssh/terminal"
 	"gopkg.in/yaml.v2"
 
 	"github.com/lxc/lxd"
 	"github.com/lxc/lxd/shared"
 	"github.com/lxc/lxd/shared/gnuflag"
 	"github.com/lxc/lxd/shared/i18n"
+	"github.com/lxc/lxd/shared/termios"
 )
 
 type SortImage [][]string
@@ -588,7 +588,7 @@ func (c *imageCmd) showAliases(aliases shared.ImageAliases) error {
 
 func (c *imageCmd) doImageEdit(client *lxd.Client, image string) error {
 	// If stdin isn't a terminal, read text from it
-	if !terminal.IsTerminal(int(syscall.Stdin)) {
+	if !termios.IsTerminal(int(syscall.Stdin)) {
 		contents, err := ioutil.ReadAll(os.Stdin)
 		if err != nil {
 			return err
diff --git a/lxc/profile.go b/lxc/profile.go
index b40fb6f..ebcf1aa 100644
--- a/lxc/profile.go
+++ b/lxc/profile.go
@@ -7,12 +7,12 @@ import (
 	"strings"
 	"syscall"
 
-	"golang.org/x/crypto/ssh/terminal"
 	"gopkg.in/yaml.v2"
 
 	"github.com/lxc/lxd"
 	"github.com/lxc/lxd/shared"
 	"github.com/lxc/lxd/shared/i18n"
+	"github.com/lxc/lxd/shared/termios"
 )
 
 type profileCmd struct {
@@ -143,7 +143,7 @@ func (c *profileCmd) doProfileCreate(client *lxd.Client, p string) error {
 
 func (c *profileCmd) doProfileEdit(client *lxd.Client, p string) error {
 	// If stdin isn't a terminal, read text from it
-	if !terminal.IsTerminal(int(syscall.Stdin)) {
+	if !termios.IsTerminal(int(syscall.Stdin)) {
 		contents, err := ioutil.ReadAll(os.Stdin)
 		if err != nil {
 			return err
@@ -313,7 +313,7 @@ func (c *profileCmd) doProfileSet(client *lxd.Client, p string, args []string) e
 		value = args[1]
 	}
 
-	if !terminal.IsTerminal(int(syscall.Stdin)) && value == "-" {
+	if !termios.IsTerminal(int(syscall.Stdin)) && value == "-" {
 		buf, err := ioutil.ReadAll(os.Stdin)
 		if err != nil {
 			return fmt.Errorf("Can't read from stdin: %s", err)
diff --git a/lxc/remote.go b/lxc/remote.go
index 8a26fc3..37590dc 100644
--- a/lxc/remote.go
+++ b/lxc/remote.go
@@ -13,6 +13,7 @@ import (
 	"strings"
 
 	"github.com/olekukonko/tablewriter"
+
 	"golang.org/x/crypto/ssh/terminal"
 
 	"github.com/lxc/lxd"
diff --git a/shared/termios/termios.go b/shared/termios/termios.go
new file mode 100644
index 0000000..4004bff
--- /dev/null
+++ b/shared/termios/termios.go
@@ -0,0 +1,79 @@
+// +build !windows
+
+package termios
+
+import (
+	"syscall"
+	"unsafe"
+
+	"github.com/lxc/lxd/shared"
+)
+
+// #include <termios.h>
+import "C"
+
+type State struct {
+	Termios syscall.Termios
+}
+
+func IsTerminal(fd int) bool {
+	_, err := GetState(fd)
+	return err == nil
+}
+
+func GetState(fd int) (*State, error) {
+	termios := syscall.Termios{}
+
+	ret, err := C.tcgetattr(C.int(fd), (*C.struct_termios)(unsafe.Pointer(&termios)))
+	if ret != 0 {
+		return nil, err.(syscall.Errno)
+	}
+
+	state := State{}
+	state.Termios = termios
+
+	return &state, nil
+}
+
+func GetSize(fd int) (int, int, error) {
+	var dimensions [4]uint16
+
+	if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TIOCGWINSZ), uintptr(unsafe.Pointer(&dimensions)), 0, 0, 0); err != 0 {
+		return -1, -1, err
+	}
+
+	return int(dimensions[1]), int(dimensions[0]), nil
+}
+
+func MakeRaw(fd int) (*State, error) {
+	var err error
+	var oldState, newState *State
+
+	oldState, err = GetState(fd)
+	if err != nil {
+		return nil, err
+	}
+
+	err = shared.DeepCopy(&oldState, &newState)
+	if err != nil {
+		return nil, err
+	}
+
+	C.cfmakeraw((*C.struct_termios)(unsafe.Pointer(&newState.Termios)))
+
+	err = Restore(fd, newState)
+	if err != nil {
+		return nil, err
+	}
+
+	return oldState, nil
+}
+
+func Restore(fd int, state *State) error {
+	ret, err := C.tcsetattr(C.int(fd), C.TCSANOW, (*C.struct_termios)(unsafe.Pointer(&state.Termios)))
+	if ret != 0 {
+		return err.(syscall.Errno)
+	}
+
+	return nil
+}
diff --git a/shared/termios/termios_windows.go b/shared/termios/termios_windows.go
new file mode 100644
index 0000000..9d0b576
--- /dev/null
+++ b/shared/termios/termios_windows.go
@@ -0,0 +1,43 @@
+// +build windows
+
+package termios
+
+import (
+	"golang.org/x/crypto/ssh/terminal"
+)
+
+type State terminal.State
+
+func IsTerminal(fd int) bool {
+	return terminal.IsTerminal(fd)
+}
+
+func GetState(fd int) (*State, error) {
+	state, err := terminal.GetState(fd)
+	if err != nil {
+		return nil, err
+	}
+
+	currentState := State(*state)
+	return &currentState, nil
+}
+
+func GetSize(fd int) (int, int, error) {
+	return terminal.GetSize(fd)
+}
+
+func MakeRaw(fd int) (*State, error) {
+	state, err := terminal.MakeRaw(fd)
+	if err != nil {
+		return nil, err
+	}
+
+	oldState := State(*state)
+	return &oldState, nil
+}
+
+func Restore(fd int, state *State) error {
+	newState := terminal.State(*state)
+
+	return terminal.Restore(fd, &newState)
+}
