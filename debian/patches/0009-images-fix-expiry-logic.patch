From dc917eed6612948453219ef8f003595dc6c0fcc3 Mon Sep 17 00:00:00 2001
From: Serge Hallyn <serge.hallyn@ubuntu.com>
Date: Wed, 9 Dec 2015 14:00:05 -0600
Subject: images: fix expiry logic

1. fix the calculation of the expiry date in sql
2. run the image expiry function at start of lxd too, don't wait
until after the expiry time has passed for first run.

Closes #1366

Signed-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>
---
 lxd/daemon.go | 20 +++++---------------
 1 file changed, 5 insertions(+), 15 deletions(-)

diff --git a/lxd/daemon.go b/lxd/daemon.go
index 972d8d8..10ae30c 100644
--- a/lxd/daemon.go
+++ b/lxd/daemon.go
@@ -555,7 +555,7 @@ func (d *Daemon) pruneExpiredImages() {
 	}
 
 	q := `
-SELECT fingerprint FROM images WHERE cached=1 AND last_use_date<=strftime('%s', 'now', '-` + expiry + ` day')`
+SELECT fingerprint FROM images WHERE cached=1 AND creation_date<=strftime('%s', date('now', '-` + expiry + ` day'))`
 	inargs := []interface{}{}
 	var fingerprint string
 	outfmt := []interface{}{fingerprint}
@@ -744,26 +744,16 @@ func (d *Daemon) Init() error {
 	/* Prune images */
 	d.pruneChan = make(chan bool)
 	go func() {
+		d.pruneExpiredImages()
 		for {
-			expiryStr, err := dbImageExpiryGet(d.db)
-			var expiry int
-			if err != nil {
-				expiry = 10
-			} else {
-				expiry, err = strconv.Atoi(expiryStr)
-				if err != nil {
-					expiry = 10
-				}
-				if expiry <= 0 {
-					expiry = 1
-				}
-			}
-			timer := time.NewTimer(time.Duration(expiry) * 24 * time.Hour)
+			timer := time.NewTimer(24 * time.Hour)
 			timeChan := timer.C
 			select {
 			case <-timeChan:
+				/* run once per day */
 				d.pruneExpiredImages()
 			case <-d.pruneChan:
+				/* run when image.remote_cache_expiry is changed */
 				d.pruneExpiredImages()
 				timer.Stop()
 			}
